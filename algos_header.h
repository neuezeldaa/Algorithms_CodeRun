#pragma once
#include <math.h>
#include <set>
#include <vector>
#include <algorithm>
#include <string>
#include <iostream>
#include <cmath>
using namespace std;


//Базовые функции:
// 1. Binary_search
int binary_search(vector<int> vec, int item);

//Задача 1: Подается три элемента, вывести средний, "центральный" элемент
int SredniyElement_1(int a, int b, int c);

//Задача 5321: Подается К число уровней елки, на каждом уровне 2^(i-1) шариков, определить сколько шариков требуется для k уровней
int NaryajElka_5321(int k);

//Задача 55: Свинки стреляют по птичкам из ружья. У птичек есть координаты
//Если попадают в птичку сверху, то она падает на всех птичек под ней.
//Требуется найти минимальное количество выстрелов для снова всех птичек количесвом N
int AngryPigs_55(int N);

//Задача 83: На клавиатуре есть N клавиш с количеством возможных нажатий на каждую клавишу,
// Задается последовательность из K нажатий. Определить, работает ли клавиша после этой последовательности?
int Keybord_83();

//Задача 62: Количество различных чисел в списке
int Different_numbers_62();

//Задача 54: Найти среди N участников, которые знают по M языков общие языки и языки, которые знает хотя бы 1 ученик. 
int poliglott_54();

//Задача 60: У Ани N кубиков, у Бори M кубиков, у каждого кубика свой цвет. Определить сходства и различие цветов кубиков.
int kubiki_60(int N, int M);

//Задача 58: На калькуляторе есть 3 цифры: x y z. Пользователь хочет ввести число N. Определить, 
//Сколько цифр нужно добавить калькулятору для того, чтоб вывести N.
int OpenCalculator_58(int x, int y, int z, int N);

//Задача 324: Много стульев. Мужик покупает стулья и продает их. 
//Нужно найти максимальную выгоду, учитывая, что в городе есть N продавцов, которые продают по 1 стулу по определенной цене
//И есть M покупателей, которые покупают по 1 стулу по определенной цене.
int AlotOfChairs_324(int N, int M);

//Задача 204: Есть N серверов и вероятности попадания запроса на сервер и
//Возникновения ошибки на сервере. Найти вероятность того, что веряотность произошла на соответствующем сервере.
int Error_204(int N);

//Задача 61: Дано два множества, найти пересечения их элементов.
int intersecc_61();

//Задача 99: Выяснить, есть ли i-элемент из второго множества в первом множестве с помощью бинарного поиска
int check_vectors_99();

//Задачка 100: Найти ближайший элемент в N векторе для j-элемента K вектора
//Функция binary_search переехала сюда с ll из-за того, что в задаче рассматриваются числа не превосходящие 2*10^9.
int binary_search_ll(const vector<long long>& vec, long long i);
int lower_bound_custom(const vector<long long>& arr, long long x);
long long closest(const vector<long long>& N_num, long long x);
int closer_to_the_item_100();

//Задача 72: Проверить, является ли список возрастающим или нет
bool is_increase_72();


//Задача 108: Вывести средний элемент для каждой отсортированной сдвоенной пары в списке векторов одного размера
int Mediana_108(int N, int L);

//Задача 5204: Дано две матрицы, требуется их перемножить и вывести новую транспонированную.
int MultiplyAndTransponiruy_5204(int n, int m, int k);

//Задача 138: Сумма чисел в прямоугольнике в матрице при помощи prefix`ов суммы
int pref_summ_138(int N, int M, int K);

//Задача 106: Провода. Дан провод из N отрезков с своими длинами. Требуется получить такую наибольшую длину, чтоб получить из них K отрезков
int otrezki_106(int N, int K);

//Задача 445: Плитка. Найти размеры комнаты n*m, если известно, что вдоль стен лежит B черных плиток и внутри W белых плиток.
int plitka_445(int B, int W);

//Задача 74: Узник Замка Иф. В стене есть отверстие размером B*E, нужно выяснить, пройдут ли через отверстие кирпичи размерами A*B*C
string Uznik_74(int A, int B, int C, int D, int E);

//Задача 140: Стэк с защитой от ошибок. Описать взаимодействия со стеком 
int Stack_140();